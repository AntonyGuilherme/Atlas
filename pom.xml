<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.telecom.slr</groupId>
    <artifactId>atlas</artifactId>
    <version>1.0</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!--
            Your existing maven-jar-plugin configuration.
            This will create a standard JAR (atlas.jar) without bundled dependencies.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version> <!-- Use a recent stable version -->
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>Main</mainClass> <!-- Your main class for the standard JAR -->
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!--
            NEW: maven-shade-plugin to create the Fat JAR.
            This plugin will bundle all dependencies into a single executable JAR.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.2</version> <!-- Use a recent stable version -->
                <executions>
                    <execution>
                        <phase>package</phase> <!-- This phase ensures it runs after compilation and packaging -->
                        <goals>
                            <goal>shade</goal> <!-- The 'shade' goal creates the fat JAR -->
                        </goals>
                        <configuration>
                            <!-- Set the name of the FAT JAR. It will be 'atlas-all.jar' -->
                            <finalName>${project.artifactId}-all</finalName>

                            <transformers>
                                <!-- This transformer makes the FAT JAR executable by specifying the main class -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>Main</mainClass> <!-- Your main class for the Fat JAR -->
                                </transformer>
                                <!--
                                If you have services (META-INF/services) or other special files that need merging,
                                you might need additional transformers like:
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                -->
                            </transformers>
                            <!--
                            Optional: Exclude specific dependencies if you don't want them bundled.
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            -->
                            <!--
                            Optional: Relocate classes to avoid conflicts if multiple dependencies
                            use the same package/class names. (e.g., if two libs bundle different versions of Guava)
                            <relocations>
                                <relocation>
                                    <pattern>com.google.common</pattern>
                                    <shadedPattern>shaded.com.google.common</shadedPattern>
                                </relocation>
                            </relocations>
                            -->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.46.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.rocksdb</groupId>
            <artifactId>rocksdbjni</artifactId>
            <version>10.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>33.4.4-jre</version>
        </dependency>
    </dependencies>

</project>
